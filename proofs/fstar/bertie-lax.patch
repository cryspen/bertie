diff --git a/proofs/fstar/extraction/Bertie.Tls13crypto.fsti b/proofs/fstar/extraction/Bertie.Tls13crypto.fsti
index 70b4e34..4e2e9ce 100644
--- a/proofs/fstar/extraction/Bertie.Tls13crypto.fsti
+++ b/proofs/fstar/extraction/Bertie.Tls13crypto.fsti
@@ -46,10 +46,12 @@ val t_SignatureScheme_cast_to_repr (x: t_SignatureScheme)
 val valid_rsa_exponent (e: Alloc.Vec.t_Vec u8 Alloc.Alloc.t_Global)
     : Prims.Pure bool Prims.l_True (fun _ -> Prims.l_True)
 
+(*
 val impl__HashAlgorithm__libcrux_algorithm (self: t_HashAlgorithm)
     : Prims.Pure (Core.Result.t_Result Libcrux.Digest.t_Algorithm u8)
       Prims.l_True
       (fun _ -> Prims.l_True)
+*)
 
 val impl__HashAlgorithm__hash_len (self: t_HashAlgorithm)
     : Prims.Pure usize Prims.l_True (fun _ -> Prims.l_True)
@@ -57,6 +59,7 @@ val impl__HashAlgorithm__hash_len (self: t_HashAlgorithm)
 val impl__HashAlgorithm__hmac_tag_len (self: t_HashAlgorithm)
     : Prims.Pure usize Prims.l_True (fun _ -> Prims.l_True)
 
+(*
 val hkdf_algorithm (alg: t_HashAlgorithm)
     : Prims.Pure (Core.Result.t_Result Libcrux.Hkdf.t_Algorithm u8)
       Prims.l_True
@@ -76,6 +79,7 @@ val impl__KemScheme__libcrux_algorithm (self: t_KemScheme)
     : Prims.Pure (Core.Result.t_Result Libcrux.Kem.t_Algorithm u8)
       Prims.l_True
       (fun _ -> Prims.l_True)
+*)
 
 type t_Algorithms = {
   f_hash:t_HashAlgorithm;
@@ -336,10 +340,12 @@ val sign
       Prims.l_True
       (fun _ -> Prims.l_True)
 
+(*
 val supported_rsa_key_size (n: Bertie.Tls13utils.t_Bytes)
     : Prims.Pure (Core.Result.t_Result Libcrux.Signature.Rsa_pss.t_RsaPssKeySize u8)
       Prims.l_True
       (fun _ -> Prims.l_True)
+*)
 
 val sign_rsa
       (#impl_916461611_: Type)
@@ -488,9 +494,10 @@ type t_AeadKey = {
   f_alg:t_AeadAlgorithm
 }
 
+(*
 val impl__AeadKey__as_libcrux_key (self: t_AeadKey)
     : Prims.Pure (Core.Result.t_Result Libcrux.Aead.t_Key u8) Prims.l_True (fun _ -> Prims.l_True)
-
+*)
 val impl__AeadKey__new (bytes: Bertie.Tls13utils.t_Bytes) (alg: t_AeadAlgorithm)
     : Prims.Pure t_AeadKey Prims.l_True (fun _ -> Prims.l_True)
 
diff --git a/proofs/fstar/extraction/Bertie.Tls13formats.Handshake_data.fst b/proofs/fstar/extraction/Bertie.Tls13formats.Handshake_data.fst
index 94b6b13..5bbc6f1 100644
--- a/proofs/fstar/extraction/Bertie.Tls13formats.Handshake_data.fst
+++ b/proofs/fstar/extraction/Bertie.Tls13formats.Handshake_data.fst
@@ -244,8 +244,8 @@ let impl__HandshakeData__from_bytes
     Core.Result.t_Result t_HandshakeData u8
   | Core.Result.Result_Err err ->
     Core.Result.Result_Err err <: Core.Result.t_Result t_HandshakeData u8
-
-let impl__HandshakeData__find_handshake_message
+ 
+let rec impl__HandshakeData__find_handshake_message
       (self: t_HandshakeData)
       (handshake_type: t_HandshakeType)
       (start: usize)
diff --git a/proofs/fstar/extraction/Bertie.Tls13formats.fst b/proofs/fstar/extraction/Bertie.Tls13formats.fst
index d5e231f..40e68b3 100644
--- a/proofs/fstar/extraction/Bertie.Tls13formats.fst
+++ b/proofs/fstar/extraction/Bertie.Tls13formats.fst
@@ -1190,7 +1190,7 @@ let check_handshake_record (p: Bertie.Tls13utils.t_Bytes) =
           (Core.Result.t_Result (Bertie.Tls13formats.Handshake_data.t_HandshakeData & usize) u8)
           (Core.Result.t_Result (Bertie.Tls13formats.Handshake_data.t_HandshakeData & usize) u8))
 
-let check_server_extensions (algs: Bertie.Tls13crypto.t_Algorithms) (b: t_Slice u8) =
+let rec check_server_extensions (algs: Bertie.Tls13crypto.t_Algorithms) (b: t_Slice u8) =
   match check_server_extension algs b with
   | Core.Result.Result_Ok (len, out) ->
     if len =. (Core.Slice.impl__len b <: usize)
@@ -1440,7 +1440,7 @@ let encrypted_extensions (v__algs: Bertie.Tls13crypto.t_Algorithms) =
     <:
     Core.Result.t_Result Bertie.Tls13formats.Handshake_data.t_HandshakeData u8
 
-let find_key_share (g: Bertie.Tls13utils.t_Bytes) (ch: t_Slice u8) =
+let rec find_key_share (g: Bertie.Tls13utils.t_Bytes) (ch: t_Slice u8) =
   if (Core.Slice.impl__len ch <: usize) <. sz 4
   then Bertie.Tls13utils.tlserr (Bertie.Tls13utils.parse_failed () <: u8)
   else
@@ -2209,7 +2209,7 @@ let parse_server_hello
 
 let server_certificate (v__algs: Bertie.Tls13crypto.t_Algorithms) (cert: Bertie.Tls13utils.t_Bytes) =
   match
-    Bertie.Tls13utils.encode_length_u8 (Rust_primitives.unsize (let list = [] in
+    Bertie.Tls13utils.encode_length_u8 (Rust_primitives.unsize (let list : list u8 = [] in
             FStar.Pervasives.assert_norm (Prims.eq2 (List.Tot.length list) 0);
             Rust_primitives.Hax.array_of_list 0 list)
         <:
@@ -2437,7 +2437,7 @@ let impl__Transcript__transcript_hash_without_client_hello
       <:
       Bertie.Tls13utils.t_Bytes)
 
-let check_extensions_slice (algs: Bertie.Tls13crypto.t_Algorithms) (b: t_Slice u8) =
+let rec check_extensions_slice (algs: Bertie.Tls13crypto.t_Algorithms) (b: t_Slice u8) =
   match check_extension algs b with
   | Core.Result.Result_Ok (len, out) ->
     if len =. (Core.Slice.impl__len b <: usize)
@@ -2949,3 +2949,4 @@ let parse_client_hello
                 Core.Option.t_Option Bertie.Tls13utils.t_Bytes &
                 Core.Option.t_Option Bertie.Tls13utils.t_Bytes &
                 usize) u8))
+ 
diff --git a/proofs/fstar/extraction/Bertie.Tls13record.fst b/proofs/fstar/extraction/Bertie.Tls13record.fst
index a15f719..6f434c9 100644
--- a/proofs/fstar/extraction/Bertie.Tls13record.fst
+++ b/proofs/fstar/extraction/Bertie.Tls13record.fst
@@ -54,7 +54,7 @@ let derive_iv_ctr (iv: Bertie.Tls13utils.t_Bytes) (n: u64) =
   in
   iv_ctr
 
-let padlen (b: Bertie.Tls13utils.t_Bytes) (n: usize) =
+let rec padlen (b: Bertie.Tls13utils.t_Bytes) (n: usize) =
   if n >. sz 0 && (Bertie.Tls13utils.f_declassify (b.[ n -! sz 1 <: usize ] <: u8) <: u8) =. 0uy
   then sz 1 +! (padlen b (n -! sz 1 <: usize) <: usize)
   else sz 0
diff --git a/proofs/fstar/extraction/Bertie.Tls13utils.fsti b/proofs/fstar/extraction/Bertie.Tls13utils.fsti
index f839107..f6973d6 100644
--- a/proofs/fstar/extraction/Bertie.Tls13utils.fsti
+++ b/proofs/fstar/extraction/Bertie.Tls13utils.fsti
@@ -262,6 +262,14 @@ let impl_22: Core.Ops.Index.t_Index t_Bytes (Core.Ops.Range.t_Range usize) =
     f_index = fun (self: t_Bytes) (x: Core.Ops.Range.t_Range usize) -> self._0.[ x ]
   }
 
+[@@ FStar.Tactics.Typeclasses.tcinstance]
+let upd_22: Rust_primitives.Hax.update_at_tc t_Bytes usize =
+  {
+    super_index = impl_21;
+    update_at = fun s (i:usize{v i < Seq.length s._0}) x -> Bytes (Seq.upd s._0 (v i) x)
+  } 
+
+
 val bytes (x: t_Slice u8) : Prims.Pure t_Bytes Prims.l_True (fun _ -> Prims.l_True)
 
 val bytes1 (x: u8) : Prims.Pure t_Bytes Prims.l_True (fun _ -> Prims.l_True)
