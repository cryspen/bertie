
type Option.
fun core__option__Option_Option_Some_c(bitstring): Option.

type Result.
fun Ok(bitstring): Result.
fun Err(): Result.
letfun Result_default() = Err().

fun unwrap_result(Result): bitstring
reduc forall b: bitstring; unwrap_result(Ok(b)) = b.


(* Bytes *)
(* type bertie__tls13utils__t_Bytes.
fun bertie__tls13utils__impl__Bytes__new(bitstring):  bertie__tls13utils__t_Bytes.
fun bertie__tls13utils__impl__Bytes__as_raw(bertie__tls13utils__t_Bytes): bitstring
reduc forall b: bitstring; bertie__tls13utils__impl__Bytes__as_raw(bertie__tls13utils__impl__Bytes__new(b)) = b.

fun bertie__tls13utils__encode_length_u8(bitstring): bertie__tls13utils__t_Bytes.

fun bertie__tls13utils__bytes(bitstring):  bertie__tls13utils__t_Bytes.

fun bertie__tls13utils__impl__Bytes__prefix(bertie__tls13utils__t_Bytes, bitstring): bertie__tls13utils__t_Bytes. *)

(* Option<Bytes> *)
(* type core__option__t_Option_of_bertie__tls13utils__t_Bytes.
fun core__option__Option_Option_Some_c(bertie__tls13utils__t_Bytes): core__option__t_Option_of_bertie__tls13utils__t_Bytes [data].
fun core__option__Option_Option_None_c(): core__option__t_Option_of_bertie__tls13utils__t_Bytes. *)



(* Hash Algorithm
type bertie__tls13crypto__t_HashAlgorithm.
fun bertie__tls13crypto__impl__HashAlgorithm__hash(bertie__tls13crypto__t_HashAlgorithm,  bertie__tls13utils__t_Bytes): bertie__tls13utils__t_Bytes.
fun bertie__tls13crypto__impl__HashAlgorithm__hash_len(bertie__tls13crypto__t_HashAlgorithm): bitstring.
fun bertie__tls13crypto__impl__HashAlgorithm__hmac_tag_len(bertie__tls13crypto__t_HashAlgorithm): bitstring. *)

(* AEAD Algorithm
type bertie__tls13crypto__t_AeadAlgorithm.
fun bertie__tls13crypto__impl__AeadAlgorithm__key_len(bertie__tls13crypto__t_AeadAlgorithm): bitstring.
fun bertie__tls13crypto__impl__AeadAlgorithm__iv_len(bertie__tls13crypto__t_AeadAlgorithm):bitstring.

type bertie__tls13crypto__t_AeadKeyIV.
fun bertie__tls13crypto__impl__AeadKeyIV__new(bitstring, bertie__tls13utils__t_Bytes): bitstring.
fun bertie__tls13crypto__impl__AeadKey__new(bertie__tls13utils__t_Bytes, bertie__tls13crypto__t_AeadAlgorithm): bitstring.

(* Algorithms pack *)
type bertie__tls13crypto__t_Algorithms.
fun accessor_bertie__tls13crypto__Algorithms_f_kem(bertie__tls13crypto__t_Algorithms): bitstring.
fun accessor_bertie__tls13crypto__Algorithms_f_aead(bertie__tls13crypto__t_Algorithms): bertie__tls13crypto__t_AeadAlgorithm.
fun accessor_bertie__tls13crypto__Algorithms_f_hash(bertie__tls13crypto__t_Algorithms):bertie__tls13crypto__t_HashAlgorithm.


(* HKDF *)
(* fun bertie__tls13handshake__hkdf_expand_label(bertie__tls13crypto__t_HashAlgorithm, bertie__tls13utils__t_Bytes, bertie__tls13utils__t_Bytes,  bertie__tls13utils__t_Bytes, bitstring): bertie__tls13utils__t_Bytes. *)
fun bertie__tls13crypto__hkdf_extract(bertie__tls13crypto__t_HashAlgorithm, bertie__tls13utils__t_Bytes, bertie__tls13utils__t_Bytes): bertie__tls13utils__t_Bytes.

(* Other *)
fun bertie__tls13crypto__kem_decap(bitstring, bertie__tls13utils__t_Bytes, bertie__tls13utils__t_Bytes): bertie__tls13utils__t_Bytes.

fun bertie__tls13crypto__zero_key(bertie__tls13crypto__t_HashAlgorithm): bertie__tls13utils__t_Bytes. *)


type impl_CryptoRng___RngCore.

(* fun core__result__impl__map_err(bertie__tls13utils__t_Bytes, bitstring): bertie__tls13utils__t_Bytes
reduc forall a: bertie__tls13utils__t_Bytes, b: bitstring; core__result__impl__map_err(a, b) = a. *)

fun core__convert__From_f_from(): bitstring.
(* 
letfun bertie__tls13crypto__impl__Algorithms__psk_mode(alg: bertie__tls13crypto__t_Algorithms) = true. *)

letfun core__ops__bit__Not__v_not(b: bool) = if b then false else true.

(* 

letfun bertie__tls13utils__impl__Bytes__from_slice(b: bitstring)= bertie__tls13utils__impl__Bytes__new(b).
fun bertie__tls13utils__impl__Bytes__concat(bertie__tls13utils__t_Bytes, bertie__tls13utils__t_Bytes): bertie__tls13utils__t_Bytes [data].

fun bertie__tls13crypto__impl__Algorithms__signature(bertie__tls13crypto__t_Algorithms): bitstring.

fun bertie__tls13crypto__SignatureScheme_SignatureScheme_EcdsaSecp256r1Sha256_c (): bitstring [data].

fun bertie__tls13crypto__SignatureScheme_SignatureScheme_RsaPssRsaSha256_c (): bitstring [data].


fun bertie__tls13crypto__SignatureScheme_SignatureScheme_ED25519_c (): bitstring [data].

fun bertie__tls13crypto__sign(bitstring, bertie__tls13utils__t_Bytes, bertie__tls13utils__t_Bytes, impl_CryptoRng___RngCore): bitstring. *)

type core__result__t_Result_of_bertie__tls13utils__t_Bytes_nat.
(* 
fun bertie__tls13cert__verification_key_from_cert(bertie__tls13utils__t_Bytes): bitstring.

type bertie__tls13crypto__t_SignatureScheme.
type bertie__tls13cert__t_CertificateKey.

fun bertie__tls13cert__rsa_public_key(bertie__tls13utils__t_Bytes, bertie__tls13cert__t_CertificateKey): bitstring. *)
(* 
fun accessor_bertie__tls13crypto__RsaVerificationKey_f_exponent(bitstring): bitstring.

fun accessor_bertie__tls13crypto__RsaVerificationKey_f_modulus(bitstring): bitstring.

fun bertie__tls13crypto__sign_rsa(bertie__tls13utils__t_Bytes, bitstring, bitstring, bertie__tls13crypto__t_SignatureScheme, bertie__tls13utils__t_Bytes, impl_CryptoRng___RngCore): bitstring. *)

letfun core__cmp__PartialOrd__ge(lhs: nat, rhs:nat ) = lhs >= rhs.
(* 
fun bertie__tls13utils__v_U16(nat): bitstring.
letfun bertie__tls13utils__u16_as_be_bytes(b: bitstring) = b. *)
