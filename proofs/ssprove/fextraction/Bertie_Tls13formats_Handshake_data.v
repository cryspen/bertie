(* File automatically generated by Hacspec *)
Set Warnings "-notation-overridden,-ambiguous-paths".
From Crypt Require Import choice_type Package Prelude.
Import PackageNotation.
From extructures Require Import ord fset.
From mathcomp Require Import word_ssrZ word.
(* From Jasmin Require Import word. *)

From Coq Require Import ZArith.
From Coq Require Import Strings.String.
Import List.ListNotations.
Open Scope list_scope.
Open Scope Z_scope.
Open Scope bool_scope.

From Hacspec Require Import ChoiceEquality.
From Hacspec Require Import LocationUtility.
From Hacspec Require Import Hacspec_Lib_Comparable.
From Hacspec Require Import Hacspec_Lib_Pre.
From Hacspec Require Import Hacspec_Lib.

Open Scope hacspec_scope.
Import choice.Choice.Exports.

From RecordUpdate Require Import RecordUpdate.

Import RecordSetNotations.

From BertieExtraction Require Import Bertie_Tls13utils.

Obligation Tactic := (* try timeout 8 *) solve_ssprove_obligations.

Definition t_HandshakeData : choice_type :=
  (t_Bytes).
Equations t_HandshakeData0 (s : both t_HandshakeData) : both t_Bytes :=
  t_HandshakeData0 s  :=
    bind_both s (fun x =>
      ret_both (x : t_Bytes)) : both t_Bytes.
Fail Next Obligation.
Equations Build_t_HandshakeData {t_HandshakeData0 : both t_Bytes} : both (t_HandshakeData) :=
  Build_t_HandshakeData  :=
    bind_both t_HandshakeData0 (fun t_HandshakeData0 =>
      ret_both ((t_HandshakeData0) : (t_HandshakeData))) : both (t_HandshakeData).
Fail Next Obligation.
#[global] Program Instance t_HandshakeData_Settable : Settable (both t_HandshakeData) :=
  let mkT := fun x =>  (bind_both (t_HandshakeData0 x) (fun t_HandshakeData0 =>
    ret_both ((t_HandshakeData0) : (t_HandshakeData)))) : _ in
  {| mkT := (@mkT)|}.
Admit Obligations.
Fail Next Obligation.

(* Equations impl_HandshakeData__concat (self : both t_HandshakeData) (other : both t_HandshakeData) : both t_HandshakeData := *)
(*   impl_HandshakeData__concat self other  := *)
(*     letb message1 := impl_HandshakeData__to_bytes self in *)
(*     letb message2 := impl_HandshakeData__to_bytes other in *)
(*     letb message1 := impl_Bytes__extend_from_slice message1 message2 in *)
(*     f_from message1 : both t_HandshakeData. *)
(* Fail Next Obligation. *)

(* Equations impl_HandshakeData__to_two (self : both t_HandshakeData) : both (t_Result (t_HandshakeData × t_HandshakeData) int8) := *)
(*   impl_HandshakeData__to_two self  := *)
(*     to_two_inner self : both (t_Result (t_HandshakeData × t_HandshakeData) int8). *)
(* Fail Next Obligation. *)

(* Equations impl_HandshakeData__to_four (self : both t_HandshakeData) : both (t_Result (t_HandshakeData × t_HandshakeData × t_HandshakeData × t_HandshakeData) int8) := *)
(*   impl_HandshakeData__to_four self  := *)
(*     to_four_inner self : both (t_Result (t_HandshakeData × t_HandshakeData × t_HandshakeData × t_HandshakeData) int8). *)
(* Fail Next Obligation. *)

(* Equations impl_HandshakeData__len (self : both t_HandshakeData) : both uint_size := *)
(*   impl_HandshakeData__len self  := *)
(*     impl_Bytes__len (0 self) : both uint_size. *)
(* Fail Next Obligation. *)
