(* File automatically generated by Hacspec *)
Set Warnings "-notation-overridden,-ambiguous-paths".
From Crypt Require Import choice_type Package Prelude.
Import PackageNotation.
From extructures Require Import ord fset.
From mathcomp Require Import word_ssrZ word.
(* From Jasmin Require Import word. *)

From Coq Require Import ZArith.
From Coq Require Import Strings.String.
Import List.ListNotations.
Open Scope list_scope.
Open Scope Z_scope.
Open Scope bool_scope.

From Hacspec Require Import ChoiceEquality.
From Hacspec Require Import LocationUtility.
From Hacspec Require Import Hacspec_Lib_Comparable.
From Hacspec Require Import Hacspec_Lib_Pre.
From Hacspec Require Import Hacspec_Lib.

Open Scope hacspec_scope.
Import choice.Choice.Exports.

Obligation Tactic := (* try timeout 8 *) solve_ssprove_obligations.

Require Import CryptoRng.
Export CryptoRng.

Require Import RngCore.
Export RngCore.

Require Import Read.
Export Read.

Require Import Write.
Export Write.

Require Import TcpStream.
Export TcpStream.

Require Import read_record.
Export read_record.

Require Import BertieError.
Export BertieError.

Require Import BertieStream.
Export BertieStream.

Require Import TlsStream.
Export TlsStream.

Require Import Crate_Tls13crypto.
Export Crate_Tls13crypto.

Require Import Crate_Tls13utils.
Export Crate_Tls13utils.

Require Import Client.
Export Client.

Definition t_ClientState {v_Stream : _} `{ t_Sized v_Stream} `{ t_Read v_Stream} `{ t_Write v_Stream} : choice_type :=
  (v_Stream Ã— t_Vec int8 t_Global Ã— t_Option t_Client).
Equations f_stream {v_Stream : _} `{ t_Sized v_Stream} `{ t_Read v_Stream} `{ t_Write v_Stream} (s : both t_ClientState) : both v_Stream :=
  f_stream s  :=
    bind_both s (fun x =>
      ret_both (fst (fst x) : v_Stream)) : both v_Stream.
Fail Next Obligation.
Equations f_read_buffer {v_Stream : _} `{ t_Sized v_Stream} `{ t_Read v_Stream} `{ t_Write v_Stream} (s : both t_ClientState) : both (t_Vec int8 t_Global) :=
  f_read_buffer s  :=
    bind_both s (fun x =>
      ret_both (snd (fst x) : (t_Vec int8 t_Global))) : both (t_Vec int8 t_Global).
Fail Next Obligation.
Equations f_cstate {v_Stream : _} `{ t_Sized v_Stream} `{ t_Read v_Stream} `{ t_Write v_Stream} (s : both t_ClientState) : both (t_Option t_Client) :=
  f_cstate s  :=
    bind_both s (fun x =>
      ret_both (snd x : (t_Option t_Client))) : both (t_Option t_Client).
Fail Next Obligation.
Equations Build_t_ClientState {v_Stream : _} `{ t_Sized v_Stream} `{ t_Read v_Stream} `{ t_Write v_Stream} {f_stream : both v_Stream} {f_read_buffer : both (t_Vec int8 t_Global)} {f_cstate : both (t_Option t_Client)} : both (t_ClientState) :=
  Build_t_ClientState  :=
    bind_both f_cstate (fun f_cstate =>
      bind_both f_read_buffer (fun f_read_buffer =>
        bind_both f_stream (fun f_stream =>
          ret_both ((f_stream,f_read_buffer,f_cstate) : (t_ClientState))))) : both (t_ClientState).
Fail Next Obligation.
Notation "'Build_t_ClientState' '[' x ']' '(' 'f_stream' ':=' y ')'" := (Build_t_ClientState (f_stream := y) (f_read_buffer := f_read_buffer x) (f_cstate := f_cstate x)).
Notation "'Build_t_ClientState' '[' x ']' '(' 'f_read_buffer' ':=' y ')'" := (Build_t_ClientState (f_stream := f_stream x) (f_read_buffer := y) (f_cstate := f_cstate x)).
Notation "'Build_t_ClientState' '[' x ']' '(' 'f_cstate' ':=' y ')'" := (Build_t_ClientState (f_stream := f_stream x) (f_read_buffer := f_read_buffer x) (f_cstate := y)).

Equations impl__new {v_Stream : _} `{ t_Sized v_Stream} `{ t_Read v_Stream} `{ t_Write v_Stream} (stream : both v_Stream) : both (t_ClientState v_Stream) :=
  impl__new stream  :=
    Build_t_ClientState (f_stream := stream) (f_read_buffer := impl__new) (f_cstate := Option_None) : both (t_ClientState v_Stream).
Fail Next Obligation.

#[global] Program Instance t_ClientState v_T_t_TlsStream {v_T : _} `{ t_Sized v_T} `{ t_Read v_T} `{ t_Write v_T} : t_TlsStream (t_ClientState v_T) v_T :=
  let f_write_tls := fun  (self : both (t_ClientState v_T)) (bytes : both (seq int8)) => run (letb '(tmp0,out) := impl__take (f_cstate self) in
  letb self := Build_t_ClientState[self] (f_cstate := tmp0) in
  letb hoist248 := out in
  letm[choice_typeMonad.result_bind_code (t_ClientState v_T Ã— t_Result 'unit t_BertieError)] cstate := matchb hoist248 with
  | Option_Some_case state =>
    letb state := ret_both ((state) : (t_Client)) in
    ControlFlow_Continue state
  | Option_None_case  =>
    letm[choice_typeMonad.result_bind_code (t_ClientState v_T Ã— t_Result 'unit t_BertieError)] hoist247 := ControlFlow_Break (prod_b (self,Result_Err BertieError_InvalidState)) in
    ControlFlow_Continue (never_to_any hoist247)
  end in
  letm[choice_typeMonad.result_bind_code (t_ClientState v_T Ã— t_Result 'unit t_BertieError)] '(wire_bytes,new_state) := matchb f_branch (impl__Client__write cstate (impl__AppData__new (f_into bytes))) with
  | ControlFlow_Break_case residual =>
    letb residual := ret_both ((residual) : (t_Result t_Infallible int8)) in
    letm[choice_typeMonad.result_bind_code (t_ClientState v_T Ã— t_Result 'unit t_BertieError)] hoist249 := ControlFlow_Break (prod_b (self,f_from_residual residual)) in
    ControlFlow_Continue (never_to_any hoist249)
  | ControlFlow_Continue_case val =>
    letb val := ret_both ((val) : (t_Bytes Ã— t_Client)) in
    ControlFlow_Continue val
  end in
  ControlFlow_Continue (letb self := Build_t_ClientState[self] (f_cstate := Option_Some new_state) in
  letb '(tmp0,out) := f_write_all (f_stream self) (f_deref (impl__Bytes__declassify wire_bytes)) in
  letb self := Build_t_ClientState[self] (f_stream := tmp0) in
  letb hoist250 := out in
  letb hax_temp_output := impl__map_err hoist250 (fun e =>
    f_into e) in
  prod_b (self,hax_temp_output))) : both (t_ClientState v_T Ã— t_Result 'unit t_BertieError) in
  let f_read_tls := fun  (self : both (t_ClientState v_T)) => run (letb '(tmp0,out) := impl__take (f_cstate self) in
  letb self := Build_t_ClientState[self] (f_cstate := tmp0) in
  letb hoist252 := out in
  letm[choice_typeMonad.result_bind_code (t_ClientState v_T Ã— t_Result (t_Vec int8 t_Global) t_BertieError)] state := matchb hoist252 with
  | Option_Some_case state =>
    letb state := ret_both ((state) : (t_Client)) in
    ControlFlow_Continue state
  | Option_None_case  =>
    letm[choice_typeMonad.result_bind_code (t_ClientState v_T Ã— t_Result (t_Vec int8 t_Global) t_BertieError)] hoist251 := ControlFlow_Break (prod_b (self,Result_Err BertieError_InvalidState)) in
    ControlFlow_Continue (never_to_any hoist251)
  end in
  ControlFlow_Continue (letb application_data := other loop todo(term) in
  letb self := Build_t_ClientState[self] (f_cstate := Option_Some state) in
  letb hax_temp_output := Result_Ok (impl__Bytes__declassify (impl__AppData__into_raw application_data)) in
  prod_b (self,hax_temp_output))) : both (t_ClientState v_T Ã— t_Result (t_Vec int8 t_Global) t_BertieError) in
  let f_stream_mut := fun  (self : both (t_ClientState v_T)) => failure (ret_both ((RefMut) The mutation of this [1m&mut[0m is not allowed here. : chString)) (ret_both ({
        let hax_temp_output: &mut T = {
            &mut (deref({
                &mut (deref(&mut (proj_bertie::stream::client::f_stream(self))))
            }))
        };
        Tuple2(self, hax_temp_output)
    } : chString)) : both t_failure in
  {| f_write_tls := (@f_write_tls);
  f_read_tls := (@f_read_tls);
  f_stream_mut := (@f_stream_mut)|}.
Fail Next Obligation.
Hint Unfold t_ClientState v_T_t_TlsStream.

Equations impl_2__open_with_stream {v_Stream : _} `{ t_Sized v_Stream} `{ t_Read v_Stream} `{ t_Write v_Stream} (host : both chString) (ciphersuite : both t_Algorithms) (stream : both v_Stream) : both (t_Result (t_BertieStream (t_ClientState v_Stream)) t_BertieError) :=
  impl_2__open_with_stream host ciphersuite stream  :=
    Result_Ok (Build_t_BertieStream (f_state := impl__new stream) (f_ciphersuite := ciphersuite) (f_host := f_to_string host)) : both (t_Result (t_BertieStream (t_ClientState v_Stream)) t_BertieError).
Fail Next Obligation.

Equations impl_3__open (host : both chString) (port : both int16) (ciphersuite : both t_Algorithms) : both (t_Result (t_BertieStream (t_ClientState t_TcpStream)) t_BertieError) :=
  impl_3__open host port ciphersuite  :=
    run (letm[choice_typeMonad.result_bind_code t_BertieError] stream := impl__map_err (impl__TcpStream__connect (prod_b (host,port))) f_from in
    letm[choice_typeMonad.result_bind_code t_BertieError] _ := impl__map_err (impl__TcpStream__set_nodelay stream (ret_both (true : 'bool))) f_from in
    Result_Ok (Result_Ok (Build_t_BertieStream (f_state := impl__new stream) (f_ciphersuite := ciphersuite) (f_host := f_to_string host)))) : both (t_Result (t_BertieStream (t_ClientState t_TcpStream)) t_BertieError).
Fail Next Obligation.

Equations impl_3__read (self : both (t_BertieStream (t_ClientState t_TcpStream))) : both (t_BertieStream (t_ClientState t_TcpStream) Ã— t_Result (t_Vec int8 t_Global) t_BertieError) :=
  impl_3__read self  :=
    letb '(tmp0,out) := f_read_tls (f_state self) in
    letb self := Build_t_BertieStream[self] (f_state := tmp0) in
    letb hax_temp_output := out in
    prod_b (self,hax_temp_output) : both (t_BertieStream (t_ClientState t_TcpStream) Ã— t_Result (t_Vec int8 t_Global) t_BertieError).
Fail Next Obligation.

Equations impl_3__write (self : both (t_BertieStream (t_ClientState t_TcpStream))) (bytes : both (seq int8)) : both (t_BertieStream (t_ClientState t_TcpStream) Ã— t_Result uint_size t_BertieError) :=
  impl_3__write self bytes  :=
    run (letb '(tmp0,out) := f_write_tls (f_state self) bytes in
    letb self := Build_t_BertieStream[self] (f_state := tmp0) in
    letb hoist254 := out in
    letb hoist255 := f_branch hoist254 in
    letm[choice_typeMonad.result_bind_code (t_BertieStream (t_ClientState t_TcpStream) Ã— t_Result uint_size t_BertieError)] _ := matchb hoist255 with
    | ControlFlow_Break_case residual =>
      letb residual := ret_both ((residual) : (t_Result t_Infallible t_BertieError)) in
      letm[choice_typeMonad.result_bind_code (t_BertieStream (t_ClientState t_TcpStream) Ã— t_Result uint_size t_BertieError)] hoist253 := ControlFlow_Break (prod_b (self,f_from_residual residual)) in
      ControlFlow_Continue (never_to_any hoist253)
    | ControlFlow_Continue_case val =>
      letb val := ret_both ((val) : ('unit)) in
      ControlFlow_Continue val
    end in
    ControlFlow_Continue (letb hax_temp_output := Result_Ok (impl__len bytes) in
    prod_b (self,hax_temp_output))) : both (t_BertieStream (t_ClientState t_TcpStream) Ã— t_Result uint_size t_BertieError).
Fail Next Obligation.

Equations impl_3__write_all (self : both (t_BertieStream (t_ClientState t_TcpStream))) (bytes : both (seq int8)) : both (t_BertieStream (t_ClientState t_TcpStream) Ã— t_Result 'unit t_BertieError) :=
  impl_3__write_all self bytes  :=
    letb '(tmp0,out) := f_write_all (failure (ret_both ((RefMut) At this position, Hax was expecting an expression of the shape `&mut _`. Hax forbids `f(x)` (where `f` expects a mutable reference as input) when `x` is not a [1mplace expression[0m[90m[1][0m or when it is a dereference expression.

[1]: https://doc.rust-lang.org/reference/expressions.html#place-expressions-and-value-expressions
 : chString)) (ret_both (deref(
        bertie::stream::bertie_stream::f_stream_mut(
            &mut (proj_bertie::stream::bertie_stream::f_state(self)),
        ),
    ) : chString))) bytes in
    letb _ := failure (ret_both ((reject_ArbitraryLhs) ExplicitRejection { reason: "a node of kind [Arbitrary_lhs] have been found in the AST" } : chString)) (ret_both ((rust_primitives::hax::failure(
        "(RefMut) At this position, Hax was expecting an expression of the shape `&mut _`. Hax forbids `f(x)` (where `f` expects a mutable reference as input) when `x` is not a \027[1mplace expression\027[0m\027[90m[1]\027[0m or when it is a dereference expression.\n\n[1]: https://doc.rust-lang.org/reference/expressions.html#place-expressions-and-value-expressions\n",
        "deref(\n        bertie::stream::bertie_stream::f_stream_mut(\n            &mut (proj_bertie::stream::bertie_stream::f_state(self)),\n        ),\n    )",
    ) = tmp0) : chString)) in
    letb hax_temp_output := impl__map_err out (fun e =>
      f_into e) in
    prod_b (self,hax_temp_output) : both (t_BertieStream (t_ClientState t_TcpStream) Ã— t_Result 'unit t_BertieError).
Fail Next Obligation.

Equations impl_3__start {impl_277843321_ : _} `{ t_Sized impl_277843321_} `{ t_RngCore impl_277843321_} `{ t_CryptoRng impl_277843321_} (self : both (t_BertieStream (t_ClientState t_TcpStream))) (rng : both impl_277843321_) : both (t_BertieStream (t_ClientState t_TcpStream) Ã— impl_277843321_ Ã— t_Result 'unit t_BertieError) :=
  impl_3__start self rng  :=
    run (letm[choice_typeMonad.result_bind_code (t_BertieStream (t_ClientState t_TcpStream) Ã— impl_277843321_ Ã— t_Result 'unit t_BertieError)] _ := ifb impl__is_some (f_cstate (f_state self))
    then letm[choice_typeMonad.result_bind_code (t_BertieStream (t_ClientState t_TcpStream) Ã— impl_277843321_ Ã— t_Result 'unit t_BertieError)] hoist256 := ControlFlow_Break (prod_b (self,rng,Result_Err BertieError_InvalidState)) in
    ControlFlow_Continue (never_to_any hoist256)
    else ControlFlow_Continue (ret_both (tt : 'unit)) in
    letb sni := impl__String__as_bytes (f_host self) in
    letb '(tmp0,out) := impl__Client__connect (f_ciphersuite self) (f_from sni) Option_None Option_None rng in
    letb rng := tmp0 in
    letb hoist258 := out in
    letb hoist259 := f_branch hoist258 in
    letm[choice_typeMonad.result_bind_code (t_BertieStream (t_ClientState t_TcpStream) Ã— impl_277843321_ Ã— t_Result 'unit t_BertieError)] '(client_hello,cstate) := matchb hoist259 with
    | ControlFlow_Break_case residual =>
      letb residual := ret_both ((residual) : (t_Result t_Infallible int8)) in
      letm[choice_typeMonad.result_bind_code (t_BertieStream (t_ClientState t_TcpStream) Ã— impl_277843321_ Ã— t_Result 'unit t_BertieError)] hoist257 := ControlFlow_Break (prod_b (self,rng,f_from_residual residual)) in
      ControlFlow_Continue (never_to_any hoist257)
    | ControlFlow_Continue_case val =>
      letb val := ret_both ((val) : (t_Bytes Ã— t_Client)) in
      ControlFlow_Continue val
    end in
    letb '(tmp0,out) := impl_3__write_all self (f_deref (impl__Bytes__declassify client_hello)) in
    letb self := tmp0 in
    letb hoist261 := out in
    letb hoist262 := f_branch hoist261 in
    letm[choice_typeMonad.result_bind_code (t_BertieStream (t_ClientState t_TcpStream) Ã— impl_277843321_ Ã— t_Result 'unit t_BertieError)] _ := matchb hoist262 with
    | ControlFlow_Break_case residual =>
      letb residual := ret_both ((residual) : (t_Result t_Infallible t_BertieError)) in
      letm[choice_typeMonad.result_bind_code (t_BertieStream (t_ClientState t_TcpStream) Ã— impl_277843321_ Ã— t_Result 'unit t_BertieError)] hoist260 := ControlFlow_Break (prod_b (self,rng,f_from_residual residual)) in
      ControlFlow_Continue (never_to_any hoist260)
    | ControlFlow_Continue_case val =>
      letb val := ret_both ((val) : ('unit)) in
      ControlFlow_Continue val
    end in
    letb read_buffer := impl__new in
    letb '(tmp0,tmp1,out) := read_record read_buffer (f_stream (f_state self)) in
    letb read_buffer := tmp0 in
    letb self := Build_t_BertieStream[self] (f_state := Build_t_ClientState[f_state self] (f_stream := tmp1)) in
    letb hoist264 := out in
    letb hoist265 := f_branch hoist264 in
    letm[choice_typeMonad.result_bind_code (t_BertieStream (t_ClientState t_TcpStream) Ã— impl_277843321_ Ã— t_Result 'unit t_BertieError)] server_hello := matchb hoist265 with
    | ControlFlow_Break_case residual =>
      letb residual := ret_both ((residual) : (t_Result t_Infallible t_BertieError)) in
      letm[choice_typeMonad.result_bind_code (t_BertieStream (t_ClientState t_TcpStream) Ã— impl_277843321_ Ã— t_Result 'unit t_BertieError)] hoist263 := ControlFlow_Break (prod_b (self,rng,f_from_residual residual)) in
      ControlFlow_Continue (never_to_any hoist263)
    | ControlFlow_Continue_case val =>
      letb val := ret_both ((val) : (t_Vec int8 t_Global)) in
      ControlFlow_Continue val
    end in
    letm[choice_typeMonad.result_bind_code (t_BertieStream (t_ClientState t_TcpStream) Ã— impl_277843321_ Ã— t_Result 'unit t_BertieError)] _ := ifb (server_hello.a[(ret_both (0 : uint_size))]) =.? (ret_both (21 : int8))
    then letb _ := v__eprint (impl_2__new_v1 (array_from_list [ret_both (Server does not support proposed algorithms.  : chString);
      ret_both (
 : chString)]) (array_from_list [impl_1__new_debug (f_ciphersuite self)])) in
    letb _ := ret_both (tt : 'unit) in
    letm[choice_typeMonad.result_bind_code (t_BertieStream (t_ClientState t_TcpStream) Ã— impl_277843321_ Ã— t_Result 'unit t_BertieError)] hoist266 := ControlFlow_Break (prod_b (self,rng,Result_Err (f_into v_UNSUPPORTED_ALGORITHM))) in
    ControlFlow_Continue (never_to_any hoist266)
    else ControlFlow_Continue (ret_both (tt : 'unit)) in
    letm[choice_typeMonad.result_bind_code (t_BertieStream (t_ClientState t_TcpStream) Ã— impl_277843321_ Ã— t_Result 'unit t_BertieError)] cstate := matchb impl__Client__read_handshake cstate (f_from server_hello) with
    | Result_Ok_case (_,cstate) =>
      letb cstate := ret_both (((cstate)) : (t_Option t_Bytes Ã— t_Client)) in
      ControlFlow_Continue cstate
    | Result_Err_case e =>
      letb e := ret_both ((e) : (int8)) in
      letb _ := v__print (impl_2__new_v1 (array_from_list [ret_both ( >>> ERROR  : chString);
        ret_both (
 : chString)]) (array_from_list [impl_1__new_display e])) in
      letb _ := ret_both (tt : 'unit) in
      letb _ := matchb e with
      | 1 =>
        letb _ := v__eprint (impl_2__new_const (array_from_list [ret_both (Server does not support proposed algorithms.
 : chString)])) in
        ret_both (tt : 'unit)
      | 137 =>
        letb _ := v__eprint (impl_2__new_v1 (array_from_list [ret_both (Wrong TLS protocol version TLS( : chString);
          ret_both ()
 : chString)]) (array_from_list [impl_1__new_debug e])) in
        ret_both (tt : 'unit)
      | 138 =>
        letb _ := v__eprint (impl_2__new_const (array_from_list [ret_both (Server sent application data instead of a handshake message.
 : chString)])) in
        ret_both (tt : 'unit)
      | 139 =>
        letb _ := v__eprint (impl_2__new_const (array_from_list [ret_both (Hello message was missing a key share.
 : chString)])) in
        ret_both (tt : 'unit)
      | 142 =>
        letb _ := v__eprint (impl_2__new_const (array_from_list [ret_both (Decode error.
 : chString)])) in
        ret_both (tt : 'unit)
      | _ =>
        letb _ := v__eprint (impl_2__new_v1 (array_from_list [ret_both (Bertie client error  : chString);
          ret_both (
 : chString)]) (array_from_list [impl_1__new_display e])) in
        ret_both (tt : 'unit)
      end in
      letm[choice_typeMonad.result_bind_code (t_BertieStream (t_ClientState t_TcpStream) Ã— impl_277843321_ Ã— t_Result 'unit t_BertieError)] hoist267 := ControlFlow_Break (prod_b (self,rng,Result_Err (f_into e))) in
      ControlFlow_Continue (never_to_any hoist267)
    end in
    letb '(tmp0,tmp1,out) := read_record read_buffer (f_stream (f_state self)) in
    letb read_buffer := tmp0 in
    letb self := Build_t_BertieStream[self] (f_state := Build_t_ClientState[f_state self] (f_stream := tmp1)) in
    letb hoist269 := out in
    letb hoist270 := f_branch hoist269 in
    letm[choice_typeMonad.result_bind_code (t_BertieStream (t_ClientState t_TcpStream) Ã— impl_277843321_ Ã— t_Result 'unit t_BertieError)] change_cipher_spec := matchb hoist270 with
    | ControlFlow_Break_case residual =>
      letb residual := ret_both ((residual) : (t_Result t_Infallible t_BertieError)) in
      letm[choice_typeMonad.result_bind_code (t_BertieStream (t_ClientState t_TcpStream) Ã— impl_277843321_ Ã— t_Result 'unit t_BertieError)] hoist268 := ControlFlow_Break (prod_b (self,rng,f_from_residual residual)) in
      ControlFlow_Continue (never_to_any hoist268)
    | ControlFlow_Continue_case val =>
      letb val := ret_both ((val) : (t_Vec int8 t_Global)) in
      ControlFlow_Continue val
    end in
    letb cf_rec := Option_None in
    letb cstate := cstate in
    letb '(cf_rec,cstate,read_buffer,self) := other loop todo(term) in
    letb change_cipher_spec := impl__Bytes__from_hex (ret_both (140303000101 : chString)) in
    letb '(tmp0,out) := impl_3__write_all self (f_deref (impl__Bytes__declassify change_cipher_spec)) in
    letb self := tmp0 in
    letb hoist278 := out in
    letb hoist279 := f_branch hoist278 in
    letm[choice_typeMonad.result_bind_code (t_BertieStream (t_ClientState t_TcpStream) Ã— impl_277843321_ Ã— t_Result 'unit t_BertieError)] _ := matchb hoist279 with
    | ControlFlow_Break_case residual =>
      letb residual := ret_both ((residual) : (t_Result t_Infallible t_BertieError)) in
      letm[choice_typeMonad.result_bind_code (t_BertieStream (t_ClientState t_TcpStream) Ã— impl_277843321_ Ã— t_Result 'unit t_BertieError)] hoist277 := ControlFlow_Break (prod_b (self,rng,f_from_residual residual)) in
      ControlFlow_Continue (never_to_any hoist277)
    | ControlFlow_Continue_case val =>
      letb val := ret_both ((val) : ('unit)) in
      ControlFlow_Continue val
    end in
    letb cf_rec := impl__unwrap cf_rec in
    letb '(tmp0,out) := impl_3__write_all self (f_deref (impl__Bytes__declassify cf_rec)) in
    letb self := tmp0 in
    letb hoist281 := out in
    letb hoist282 := f_branch hoist281 in
    letm[choice_typeMonad.result_bind_code (t_BertieStream (t_ClientState t_TcpStream) Ã— impl_277843321_ Ã— t_Result 'unit t_BertieError)] _ := matchb hoist282 with
    | ControlFlow_Break_case residual =>
      letb residual := ret_both ((residual) : (t_Result t_Infallible t_BertieError)) in
      letm[choice_typeMonad.result_bind_code (t_BertieStream (t_ClientState t_TcpStream) Ã— impl_277843321_ Ã— t_Result 'unit t_BertieError)] hoist280 := ControlFlow_Break (prod_b (self,rng,f_from_residual residual)) in
      ControlFlow_Continue (never_to_any hoist280)
    | ControlFlow_Continue_case val =>
      letb val := ret_both ((val) : ('unit)) in
      ControlFlow_Continue val
    end in
    ControlFlow_Continue (letb self := Build_t_BertieStream[self] (f_state := Build_t_ClientState[f_state self] (f_cstate := Option_Some cstate)) in
    letb hax_temp_output := Result_Ok (ret_both (tt : 'unit)) in
    prod_b (self,rng,hax_temp_output))) : both (t_BertieStream (t_ClientState t_TcpStream) Ã— impl_277843321_ Ã— t_Result 'unit t_BertieError).
Fail Next Obligation.

Equations impl_3__client {impl_277843321_ : _} `{ t_Sized impl_277843321_} `{ t_RngCore impl_277843321_} `{ t_CryptoRng impl_277843321_} (host : both chString) (port : both int16) (ciphersuite : both t_Algorithms) (rng : both impl_277843321_) : both (impl_277843321_ Ã— t_Result (t_BertieStream (t_ClientState t_TcpStream)) t_BertieError) :=
  impl_3__client host port ciphersuite rng  :=
    run (letm[choice_typeMonad.result_bind_code (impl_277843321_ Ã— t_Result (t_BertieStream (t_ClientState t_TcpStream)) t_BertieError)] stream := matchb f_branch (impl_3__open host port ciphersuite) with
    | ControlFlow_Break_case residual =>
      letb residual := ret_both ((residual) : (t_Result t_Infallible t_BertieError)) in
      letm[choice_typeMonad.result_bind_code (impl_277843321_ Ã— t_Result (t_BertieStream (t_ClientState t_TcpStream)) t_BertieError)] hoist283 := ControlFlow_Break (prod_b (rng,f_from_residual residual)) in
      ControlFlow_Continue (never_to_any hoist283)
    | ControlFlow_Continue_case val =>
      letb val := ret_both ((val) : (t_BertieStream (t_ClientState t_TcpStream))) in
      ControlFlow_Continue val
    end in
    letb stream := Build_t_BertieStream[stream] (f_ciphersuite := ciphersuite) in
    letb '(tmp0,tmp1,out) := impl_3__start stream rng in
    letb stream := tmp0 in
    letb rng := tmp1 in
    letb hoist285 := out in
    letb hoist286 := f_branch hoist285 in
    letm[choice_typeMonad.result_bind_code (impl_277843321_ Ã— t_Result (t_BertieStream (t_ClientState t_TcpStream)) t_BertieError)] _ := matchb hoist286 with
    | ControlFlow_Break_case residual =>
      letb residual := ret_both ((residual) : (t_Result t_Infallible t_BertieError)) in
      letm[choice_typeMonad.result_bind_code (impl_277843321_ Ã— t_Result (t_BertieStream (t_ClientState t_TcpStream)) t_BertieError)] hoist284 := ControlFlow_Break (prod_b (rng,f_from_residual residual)) in
      ControlFlow_Continue (never_to_any hoist284)
    | ControlFlow_Continue_case val =>
      letb val := ret_both ((val) : ('unit)) in
      ControlFlow_Continue val
    end in
    ControlFlow_Continue (letb hax_temp_output := Result_Ok stream in
    prod_b (rng,hax_temp_output))) : both (impl_277843321_ Ã— t_Result (t_BertieStream (t_ClientState t_TcpStream)) t_BertieError).
Fail Next Obligation.
