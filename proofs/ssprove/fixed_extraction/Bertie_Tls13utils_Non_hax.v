(* File automatically generated by Hacspec *)
Set Warnings "-notation-overridden,-ambiguous-paths".
From Crypt Require Import choice_type Package Prelude.
Import PackageNotation.
From extructures Require Import ord fset.
From mathcomp Require Import word_ssrZ word.
(* From Jasmin Require Import word. *)

From Coq Require Import ZArith.
From Coq Require Import Strings.String.
Import List.ListNotations.
Open Scope list_scope.
Open Scope Z_scope.
Open Scope bool_scope.

From Hacspec Require Import ChoiceEquality.
From Hacspec Require Import LocationUtility.
From Hacspec Require Import Hacspec_Lib_Comparable.
From Hacspec Require Import Hacspec_Lib_Pre.
From Hacspec Require Import Hacspec_Lib.

Open Scope hacspec_scope.
Import choice.Choice.Exports.

Obligation Tactic := (* try timeout 8 *) solve_ssprove_obligations.

Require Import Super.
Export Super.

#[global] Program Instance t_Bytes_t_IndexMut : t_IndexMut t_Bytes uint_size :=
  let f_index_mut := fun  (self : both t_Bytes) (i : both uint_size) => failure (ret_both ((RefMut) The mutation of this [1m&mut[0m is not allowed here. : chString)) (ret_both ({
        let hax_temp_output: &mut int = {
            &mut (deref({
                &mut (deref(
                    &mut (deref(
                        core::ops::index::f_index_mut(
                            &mut (proj_bertie::tls13utils::_0(self)),
                            i,
                        ),
                    )),
                ))
            }))
        };
        Tuple2(self, hax_temp_output)
    } : chString)) : both t_failure in
  {| f_index_mut := (@f_index_mut)|}.
Fail Next Obligation.
Hint Unfold t_Bytes_t_IndexMut.

#[global] Program Instance t_Bytes_t_IndexMut : t_IndexMut t_Bytes (t_Range uint_size) :=
  let f_index_mut := fun  (self : both t_Bytes) (x : both (t_Range uint_size)) => failure (ret_both ((RefMut) The mutation of this [1m&mut[0m is not allowed here. : chString)) (ret_both ({
        let hax_temp_output: &mut [int] = {
            &mut (deref({
                &mut (deref(
                    &mut (deref(
                        core::ops::index::f_index_mut(
                            &mut (proj_bertie::tls13utils::_0(self)),
                            x,
                        ),
                    )),
                ))
            }))
        };
        Tuple2(self, hax_temp_output)
    } : chString)) : both t_failure in
  {| f_index_mut := (@f_index_mut)|}.
Fail Next Obligation.
Hint Unfold t_Bytes_t_IndexMut.
